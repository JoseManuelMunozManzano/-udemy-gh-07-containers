name: Deployment (SERVICE WITHOUT CONTAINER)
on:
  push:
    branches:
      - main
      - dev
env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest
    env:
      MONGODB_CONNECTION_PROTOCOL: mongodb
      # Para comunicarse con un services, si el job NO se ejecuta en un container (este caso), entonces GitHub Actions # NO creará automáticamente un entorno de red y hay que realizar la siguiente configuración
      MONGODB_CLUSTER_ADDRESS: 127.0.0.1:27017
      # El usuario y contraseña aquí deben ser los mismos que se hayan puesto en el services
      # para poder conectarse correctamente.
      MONGODB_USERNAME: root
      MONGODB_PASSWORD: example
      PORT: 8080
    # Ejemplo de un service container para definir una BD de testing que existirá mientras se ejecuta nuestro workflow.
    # Los service containers se pueden usar con container y con jobs que se ejecutan directamente en la máquina.
    # Pero los service containers, en cualquier caso, siempre se ejecutan en containers.
    # Para usarlos se usa la key services.
    # Los services se definen a nivel de jobs. Cada job su services.
    # Para el services se añade un identificador (un label, en el ejmplo mongodb)
    # Y luego indentado se indican keys específicas para ese service. Esas keys están definidas por GitHub Actions.
    services:
      mongodb:
        # https://hub.docker.com/_/mongo
        image: mongo
        # Hay que abrir el puerto indicado en MONGODB_CLUSTER_ADDRESS
        ports:
          - 27017:27017
        env:
          # Como esta BD solo existe en el workflow (cuando termine deja de existir) el usuario y contraseña puede
          # ser cualquier cosa.
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT # requires MongoDB Atlas to accept requests from anywhere!
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        run: |
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
          echo "${{ env.PORT }}"
